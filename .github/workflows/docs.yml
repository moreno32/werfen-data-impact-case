name: 📚 Documentation Update

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
      - 'dbt_project/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # JOB 1: DOCUMENTATION VALIDATION
  # ==========================================
  validate-docs:
    name: ✅ Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Documentation Tools
      run: |
        pip install mkdocs mkdocs-material markdown-include
        
    - name: ✅ Validate Markdown Syntax
      run: |
        echo "📋 Validating markdown files..."
        
        # Check for broken markdown syntax
        find docs/ -name "*.md" -exec python -c "
        import sys
        import re
        
        file_path = sys.argv[1]
        print(f'Checking {file_path}...')
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Check for common markdown issues
        issues = []
        
        # Check for malformed headers
        if re.search(r'^#{7,}', content, re.MULTILINE):
            issues.append('Headers with more than 6 levels found')
            
        # Check for unmatched code blocks
        code_blocks = content.count('```')
        if code_blocks % 2 != 0:
            issues.append('Unmatched code blocks found')
            
        # Check for empty links
        if re.search(r'\[.*?\]\(\s*\)', content):
            issues.append('Empty links found')
            
        if issues:
            print(f'❌ Issues in {file_path}:')
            for issue in issues:
                print(f'  - {issue}')
            sys.exit(1)
        else:
            print(f'✅ {file_path} is valid')
        " {} \;
        
    - name: 🔍 Check Documentation Completeness
      run: |
        echo "📊 Checking documentation completeness..."
        
        # Required documentation files
        REQUIRED_DOCS=(
          "docs/README_documentacion.md"
          "README.md"
        )
        
        for doc in "${REQUIRED_DOCS[@]}"; do
          if [ -f "$doc" ]; then
            echo "✅ $doc exists"
          else
            echo "❌ $doc missing"
            exit 1
          fi
        done
        
        # Check for component documentation
        COMPONENTS=("logging" "security" "performance" "portability" "distributed")
        
        for component in "${COMPONENTS[@]}"; do
          if [ -d "src/$component" ]; then
            # Check if component is documented
            if grep -q "$component" docs/*.md README.md; then
              echo "✅ $component component is documented"
            else
              echo "⚠️ $component component may need documentation"
            fi
          fi
        done

  # ==========================================
  # JOB 2: GENERATE DEPLOYMENT GUIDE
  # ==========================================
  deployment-guide:
    name: 📖 Generate Deployment Guide
    runs-on: ubuntu-latest
    needs: validate-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📖 Generate CI/CD Deployment Guide
      run: |
        echo "📚 Generating CI/CD deployment guide..."
        
        cat > docs/guia_cicd_deployment.md << 'EOF'
        # 🚀 Guía de CI/CD y Deployment
        
        Esta guía explica el pipeline CI/CD implementado para el proyecto Werfen Data Pipeline.
        
        ## 📋 Tabla de Contenidos
        
        1. [Visión General](#visión-general)
        2. [Workflows de GitHub Actions](#workflows-de-github-actions)
        3. [Equivalencias AWS](#equivalencias-aws)
        4. [Configuración de Entornos](#configuración-de-entornos)
        5. [Proceso de Deployment](#proceso-de-deployment)
        6. [Monitoreo y Alertas](#monitoreo-y-alertas)
        7. [Troubleshooting](#troubleshooting)
        
        ## 🎯 Visión General
        
        El pipeline CI/CD está diseñado para ser **simple pero enterprise-ready**, ideal para POCs que necesitan escalabilidad hacia AWS.
        
        ### Características Principales:
        - ✅ **Continuous Integration** completo
        - ✅ **Continuous Deployment** por entornos
        - ✅ **Security Scanning** automatizado
        - ✅ **Documentation** auto-generada
        - ✅ **AWS-ready** con equivalencias 1:1
        
        ## 🔧 Workflows de GitHub Actions
        
        ### 1. 🔧 Continuous Integration (ci.yml)
        
        **Trigger:** Push/PR a main, develop, feature/*
        
        **Jobs:**
        1. **Code Quality & Security** - Linting, formatting, security scan
        2. **Component Testing** - Test individual de cada componente
        3. **Integration Testing** - Test de integración completo
        4. **Build Validation** - Validación de build y packaging
        5. **Deployment Readiness** - Verificación pre-deployment
        
        ### 2. 🚀 Continuous Deployment (cd.yml)
        
        **Trigger:** Push a main + CI success
        
        **Jobs:**
        1. **Deployment Preparation** - Determinación de entorno y matriz
        2. **Deploy Components** - Deployment paralelo por componente
        3. **Integration Validation** - Validación end-to-end
        4. **Post-Deployment** - Notificaciones y rollback
        
        ### 3. 🛡️ Security Scanning (security.yml)
        
        **Trigger:** Schedule (lunes 2 AM) + PRs importantes
        
        **Jobs:**
        1. **Dependency Scan** - Vulnerabilidades en dependencias
        2. **Code Analysis** - Análisis estático de seguridad
        3. **Secrets Scan** - Detección de secretos hardcodeados
        4. **Infrastructure Scan** - Seguridad de configuración
        
        ### 4. 📚 Documentation Update (docs.yml)
        
        **Trigger:** Push a main/develop + cambios en docs
        
        **Jobs:**
        1. **Validate Documentation** - Validación de markdown
        2. **Generate Deployment Guide** - Esta guía
        
        ## 🎯 Equivalencias AWS
        
        | GitHub Actions | AWS Service | Función |
        |----------------|-------------|---------|
        | **GitHub Actions** | **CodePipeline + CodeBuild** | Orquestación CI/CD |
        | **GitHub Artifacts** | **S3 + CodeArtifact** | Almacenamiento de artifacts |
        | **GitHub Secrets** | **Secrets Manager** | Gestión de secretos |
        | **GitHub Environments** | **CodeDeploy + ECS** | Deployment por entornos |
        | **Security Scanning** | **Inspector + GuardDuty** | Análisis de seguridad |
        | **Auto-docs** | **CodeGuru + CloudFormation** | Documentación automática |
        
        ## ⚙️ Configuración de Entornos
        
        ### Development
        - **Componentes:** Airflow + dbt
        - **Trigger:** Feature branches
        - **Validación:** Tests básicos
        
        ### Staging  
        - **Componentes:** Airflow + dbt + S3 sync
        - **Trigger:** Push a main
        - **Validación:** Tests completos + integración
        
        ### Production
        - **Componentes:** Airflow + dbt + S3 sync + Monitoring
        - **Trigger:** Manual (workflow_dispatch)
        - **Validación:** Tests completos + health checks + rollback
        
        ## 🚀 Proceso de Deployment
        
        ### Deployment Automático (Staging)
        
        1. Push to main → CI Pipeline
        2. CI Success → CD Pipeline
        3. Deploy Components (paralelo)
        4. Integration Tests
        5. Success/Rollback
        
        ### Deployment Manual (Production)
        
        1. **Trigger Manual:** Actions > CD > Run workflow > production
        2. **Review:** Validar deployment plan
        3. **Execute:** Deployment paralelo por componente
        4. **Validate:** Health checks automáticos
        5. **Monitor:** Observabilidad completa
        
        ## 📊 Monitoreo y Alertas
        
        ### Métricas Monitoreadas
        - ✅ **Build Success Rate** - Porcentaje de builds exitosos
        - ✅ **Deployment Frequency** - Frecuencia de deployments
        - ✅ **Lead Time** - Tiempo desde commit hasta deployment
        - ✅ **Mean Time to Recovery** - Tiempo de recuperación
        
        ### Alertas Configuradas
        - 🚨 **Build Failures** - Notificación inmediata
        - 🚨 **Security Issues** - Alertas de seguridad
        - 🚨 **Deployment Failures** - Fallos en production
        - 📊 **Weekly Reports** - Resumen semanal
        
        ## 🔧 Troubleshooting
        
        ### Problemas Comunes
        
        #### CI Pipeline Falla
        1. Ir a Actions tab
        2. Seleccionar run fallido
        3. Expandir job con error
        4. Revisar logs detallados
        
        #### Deployment Falla
        1. Ir al último deployment exitoso
        2. Re-run workflow
        3. O trigger manual rollback
        
        #### Security Scan Issues
        1. Descargar artifacts de security scan
        2. Revisar JSON reports
        3. Aplicar fixes necesarios
        4. Re-run pipeline
        
        ## 🎯 Migración a AWS
        
        ### Roadmap de Migración (4 semanas)
        
        **Semana 1: Setup Infrastructure**
        - Configurar CodePipeline + CodeBuild
        - Migrar secrets a Secrets Manager
        - Setup S3 buckets para artifacts
        
        **Semana 2: Pipeline Migration**
        - Migrar workflows a CodeBuild specs
        - Configurar triggers y webhooks
        - Setup environments en CodeDeploy
        
        **Semana 3: Security & Monitoring**
        - Configurar Inspector + GuardDuty
        - Setup CloudWatch + X-Ray
        - Configurar alertas SNS
        
        **Semana 4: Testing & Go-Live**
        - Testing completo del pipeline
        - Rollback procedures
        - Go-live y monitoring
        
        ### Costos Estimados AWS
        
        | Servicio | Costo Mensual | Notas |
        |----------|---------------|-------|
        | CodePipeline | $1/pipeline | ~$10/mes (10 pipelines) |
        | CodeBuild | $0.005/min | ~$50/mes (1000 mins) |
        | S3 Storage | $0.023/GB | ~$5/mes (200 GB) |
        | Secrets Manager | $0.40/secret | ~$20/mes (50 secrets) |
        | Inspector | $0.15/assessment | ~$15/mes (100 scans) |
        | **Total** | **~$100/mes** | **vs $300/mes CI/CD tradicional** |
        
        ## 📞 Soporte
        
        Para problemas con el pipeline CI/CD:
        
        1. **Revisar esta documentación**
        2. **Consultar logs en GitHub Actions**
        3. **Revisar issues del repositorio**
        4. **Contactar al equipo DevOps**
        
        ---
        
        *Documentación generada automáticamente*
        EOF
        
        echo "✅ CI/CD deployment guide generated"
        
    - name: 📊 Upload Deployment Guide
      uses: actions/upload-artifact@v3
      with:
        name: deployment-guide
        path: docs/guia_cicd_deployment.md 